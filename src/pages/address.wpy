<template>
  <div class="page-address">
    <div class="address-list" v-if="!showAdd">
      <div class="address-list__item" v-for="(item, index) in addressList" :key="index" @tap.stop="hanldeSelectAddress(item, index)">
        <div class="item-info">
          <div class="message-main">
            <div class="message-main-name">{{item.recipient}}</div>
            <div>{{item.phone}}</div>
            <div class="sign-box" v-if="item.isDefault === 0">默认</div>
          </div>
          <div class="item-info__address">
            <elip line="2">{{ item.province }}{{ item.city }}{{ item.detailAddress }}</elip>
          </div>
        </div>
        <div class="item-control">
          <image class="icon" @tap.stop="handleToEdite(item, index)" src="../images/ico_set_Change.png" mode="aspectFill"></image>
        </div>
      </div>

      <div class="address-list__btn">
        <div class="add-btn" @tap.stop="handleToEdite()">新建收货地址</div>
      </div>
    </div>

    <div class="address-form" v-else>
      <form bindsubmit="formSubmit">
        <div class="form-item">
          <div class="form-item__label">收货人</div>
          <div class="form-item__body">
            <input name="recipient" type="text" data-name="recipient" placeholder="请输入收件人名称" placeholder-class="default-placeholder" @blur="handleInputBlur" value="{{singleInfo.recipient}}" />
            <div class="form-item__status is-error" hidden="{{!validResult.recipient}}" @tap.stop="handleHiddenError('recipient')">
              <text class="form-item__status-tip">
                <text class="form-item__status-cont">{{validResult.recipient}}</text>
                <text class="form-item__status-trigger">重新输入</text>
              </text>
            </div>
          </div>
        </div>
        <div class="form-item">
          <div class="form-item__label">手机号码</div>
          <div class="form-item__body">
            <input name="phone" type="number" data-name="phone" placeholder="请输入手机号码" placeholder-class="default-placeholder" @blur="handleInputBlur" value="{{singleInfo.phone}}" />
            <div class="form-item__status is-error" hidden="{{!validResult.phone}}" @tap.stop="handleHiddenError('phone')">
              <text class="form-item__status-tip">
                <text class="form-item__status-cont">{{validResult.phone}}</text>
                <text class="form-item__status-trigger">重新输入</text>
              </text>
            </div>
          </div>
        </div>
        <div class="form-item">
          <div class="form-item__label">所在地区</div>
          <div class="form-item__body" @tap.stop="bindRegionChange">
            <div name="address" class="area" :class="{'default-placeholder': !singleInfo.province && !singleInfo.city}">{{singleInfo.province && singleInfo.city ? singleInfo.province + singleInfo.city : '请选择地区'}}</div>
            <div class="form-item__status is-error" hidden="{{!validResult.address}}" @tap.stop="handleHiddenError('address')">
              <text class="form-item__status-tip">
                <text class="form-item__status-cont">{{validResult.address}}</text>
                <text class="form-item__status-trigger">重新输入</text>
              </text>
            </div>
            <image class="arrow" src="../images/arrow.png" mode="aspectFill"></image>
          </div>
        </div>
        <div class="form-item">
          <div class="form-item__label">详细地址</div>
          <div class="form-item__body">
            <input name="detailAddress" type="text" placeholder="如道路、门牌、小区、单元等" data-name="detailAddress" @blur="handleInputBlur"  placeholder-class="default-placeholder" value="{{singleInfo.detailAddress}}" />
            <div class="form-item__status is-error" hidden="{{!validResult.detailAddress}}" @tap.stop="handleHiddenError('detailAddress')">
              <text class="form-item__status-tip">
                <text class="form-item__status-cont">{{validResult.detailAddress}}</text>
                <text class="form-item__status-trigger">重新输入</text>
              </text>
            </div>
          </div>
        </div>
        <div class="form-item" @tap.stop="handleSetDefault(singleInfo.isDefault)">
          <div class="form-item__label">设置为默认地址</div>

          <div class="radio-conatiner">
            <div class="radio-box">
              <image class="ico_selected" src="../images/radio-check.png" v-if="singleInfo.isDefault === 0"></image>
            </div>
          </div>
        </div>
        <div class="split-bar" v-if="singleInfo.id"></div>
        <div class="form-item del-wrap" v-if="singleInfo.id" @tap.stop="handleToDelete(singleInfo.id)">
          <div class="form-item__label btn">删除收货地址</div>
        </div>

        <div class="btn-area">
          <button class="default-btn open-type-btn" hover-class="none" v-if="addressList.length" @tap.stop="showAdd = false">返回上一页</button>
          <button class="save-btn font-size--30" form-type="submit">保存</button>
        </div>
      </form>
    </div>

    <lxzw-popup class="address-picker" border-radius="false" full="false" gaps="{{[0]}}" status="{{addressStatus}}" position="bottom" show-close="false" @popupclose.stop="addressStatus = 'hide'">
      <div style="width: 750rpx" class="address-picker__box" @tap.stop="noop">
        <div class="address-picker__toolbar">
          <text class="font-color-extra-light-gray" @tap.stop="addressStatus = 'hide'">取消</text>
          <text @tap.stop="handleSaveArea">完成</text>
        </div>
        <picker-view indicator-style="height: 50px" style="height: 180px; width: 100%;" mask-class="address-picker__mask" indicator-class="address-picker__indicator" @change="handleChangeArea" class="font-size--28 address-picker__div" value="{{indexs}}">
          <picker-view-column>
            <div class="address-picker__item" v-for="(item, index) in provinceList" :key="index" style="line-height: 50px">{{item.name}}</div>
          </picker-view-column>
          <picker-view-column v-if="cityList.length">
            <div class="address-picker__item" v-for="(item, index) in cityList" :key="index" style="line-height: 50px">{{item.name}}</div>
          </picker-view-column>
        </picker-view>
      </div>
    </lxzw-popup>
  </div>
</template>
<config>
{
  usingComponents: {
    "elip": '~@/packages/elip',
    "lxzw-popup": '~@/packages/popup'
  }
}
</config>
<script>
  import wepy from '@wepy/core'
  import wxApi from '../api/wxApi'
  import store from '../store'
  import { mapMutations } from '@wepy/x'
  import eventHub from '../common/eventHub'
  
  wepy.page({
    store,
    config: {
      navigationBarTitleText: '地址管理'
    },
    data: {
      addressList: [],
      showAdd: false,
      indexs: [0, 0],
      provinceList: [],
      cityList: [],
      pid: '',
      addressStatus: 'hide',
      validResult: {},
      singleInfo: {
        recipient: '',
        phone: '',
        area: '',
        province: '',
        city: '',
        detailAddress: '',
        isDefault: 1,
        id: '',
        provinceId: '',
        cityId: ''
      },
      districtsData: [],
      isEdit: false,
      editIndex: 0
    },
    async created () {
      wx.showLoading({
        title: '加载中',
        mask: true
      })
      Promise.all([this.getAddressList(), this.getDistricts(...this.indexs)]).then(res => {
        const { province, city, pindex, cindex, pid } = res[1]
        this.provinceList = province
        this.cityList = city
        this.indexs = [pindex, cindex]
        this.pid = pid
        console.log(res)
        wx.hideLoading()
      }).catch(err => {
        console.log(err)
        wx.hideLoading()
      })
    },
    methods: {
      ...mapMutations({
        updateKey: 'updateKey'
      }),
      handleToDelete (id) {
        const that = this
        wx.showModal({
          title: '提示',
          content: '您确定删除地址',
          success(res) {
            if (res.confirm) {
              wxApi.deleteAddressdelete(id).then(res => {
                wx.showToast({title: '删除成功'})
                that.addressList.splice(that.editIndex, 1)
                if (that.addressList.length === 1) {
                  that.addressList[0].isDefault = 0
                }
                that.showAdd = false
              }).catch(e => {
                console.log(e)
                wx.showToast({title: '删除失败'})
              })
            }
          }
        })
      },
      handleSetDefault (isDefault) {
        this.singleInfo.isDefault = isDefault ? 0 : 1
      },
      noop () {},
      async bindRegionChange () {
        const { indexs, singleInfo, provinceList } = this
        const { pindex, cindex, city, province } = await this.getDistricts(...indexs, singleInfo.provinceId, singleInfo.cityId)
        this.indexs = [pindex, cindex]
        if (!provinceList.length) {
          this.provinceList = province
        }
        this.cityList = city
        this.addressStatus = 'show'
      },
      handleHiddenError (type) {
        this.validResult[type] = ''
      },
      handleInputBlur (e) { // 对输入框进行动态赋值
        let val = e.$wx.detail.value
        let name = e.currentTarget.dataset.name
        this.singleInfo[name] = val
      },
      async formSubmit (e) {
        let {recipient = '', phone = '', detailAddress = ''} = e.$wx.detail.value
        recipient = recipient.trim()
        phone = phone.trim()
        detailAddress = detailAddress.trim()
        let validResult = {}
        let i = 0
        if (!recipient) {
          validResult.recipient = '收件人为空'
          i++
        } else if (recipient.length > 10) {
          validResult.recipient = '最多可输10个字'
          i++
        }
        if (!phone) {
          validResult.phone = '联系电话为空'
          i++
        } else if (!/^1\d{10}$/.test(phone)) {
          validResult.phone = '手机号码错误'
          i++
        }
        if (!detailAddress) {
          validResult.detailAddress = '详细地址为空'
          i++
        }
        let { province, city, provinceId, cityId, id, isDefault } = this.singleInfo
        const [ pindex, cindex ] = this.indexs
        const { provinceList, cityList, addressList, isEdit, editIndex } = this
        let isFirstAdd = !addressList.length
        if (!province && !city) {
          validResult.address = '收件地址为空'
          i++
        }
        this.validResult = validResult
        if (i) return
        try {
          wx.showLoading({
            title: '保存中',
            mask: true
          })
          provinceId = pindex !== undefined ? provinceList[pindex].id : provinceId
          cityId = cindex !== undefined ? cityList[cindex].id : cityId
          let args = {
            recipient,
            phone,
            detailAddress,
            provinceId,
            cityId,
            isDefault
          }
          if (isEdit) {
            args.id = id
          }
          await isEdit ? wxApi.putAddressupdate(args) : wxApi.postAddressAdd(args)
          if (this.singleInfo.isDefault === 0) {
            addressList.forEach(item => {
              item.isDefault = 1
            })
            this.singleInfo.isDefault = 0
          }
          if (isEdit) {
            this.$set(addressList, editIndex, {...addressList[editIndex], ...this.singleInfo})
          } else {
            addressList.push(this.singleInfo)
          }
          if (isFirstAdd) { // 第一次添加
            this.goNextPage()
          }
          wx.hideLoading()
          this.showAdd = false
        } catch (error) {
          wx.hideLoading()
          console.log(error)
        }
      },
      goNextPage () {
        wx.navigateBack()
      },
      async handleChangeArea (e) {
        const [ changeIndex1, changeIndex2 ] = e.$wx.detail.value
        const [ index1, index2 ] = this.indexs
        if (changeIndex1 !== index1) {
          this.indexs = [changeIndex1, 0]
        } else {
          this.indexs = [changeIndex1, changeIndex2]
        }
        const { city } = await this.getDistricts(...this.indexs)
        this.cityList = city
        this.addressStatus = 'show'
      },
      handleSaveArea () { // 保存地区地址
        const { indexs, provinceList, cityList } = this
        const [p, c] = indexs
        const _province = provinceList[p]
        const _city = cityList[c]
        this.singleInfo.province = _province.name
        this.singleInfo.city = _city.name
        this.addressStatus = 'hide'
      },
      handleToEdite (item, index) {
        if (item) {
          const { detailAddress, id, isDefault, memberId, phone, recipient, province, provinceId, city, cityId } = item
          this.singleInfo = {
            province,
            city,
            detailAddress,
            id,
            isDefault,
            phone,
            recipient,
            provinceId,
            cityId,
            memberId
          }
          this.indexs = [undefined, undefined]
          this.isEdit = true
          this.editIndex = index
        } else {
          this.singleInfo = {
            province: '',
            city: '',
            address: '',
            detailAddress: '',
            id: '',
            isDefault: 1,
            phone: '',
            recipient: '',
            value: [],
            memberId: ''
          }
          this.indexs = [0, 0]
          this.isEdit = false
        }
        this.showAdd = true
      },
      hanldeSelectAddress (item) {
        this.singleInfo = item
        this.updateKey({
          key: 'currentAddress',
          val: item
        })
        eventHub.$emit('acceptFromAddress', item)
        this.goNextPage()
      },
      async getAddressList () {
        try {
          const res = await wxApi.getAddressList()
          let addressList = res || []
          this.showAdd = addressList.length === 0
          this.addressList = addressList
          return this.addressList
        } catch (error) {
          console.log(error)
        }
      },
      async getDistricts (pindex, cindex, pid, cid) {
        let province = []
        let city = []
        const res = await wxApi.getListDistricts()
        res.forEach(item => {
          province.push({
            id: item.id,
            name: item.name
          })
        })
        if (pid) {
          pindex = province.findIndex(p => p.id === pid) || 0
        }
        this.districtsData = res
        pid = pid || province[pindex].id
        city = res.filter(item => item.id === pid)[0].list
        if (cid) {
          cindex = city.findIndex(c => c.id === cid) || 0
        }
        return {
          province,
          city,
          pindex,
          cindex,
          pid
        }
      }
    }
  })
</script>
<style lang="less" scoped>
.page-address {
  width: 100%;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  background-color: #fff;
  .address-list {
    position: relative;
    &__item {
      position: relative;
      margin-bottom: 20rpx;
      font-size: 28rpx;
      background-color: #fff;
      &::after {
        position: absolute;
        content: "";
        height: 1rpx;
        width: 100%;
        left: 0;
        bottom: 0;
        transform: scaleY(0.5);
        background-color: #d7d7d7;
      }
      .item-info {
        position: relative;
        padding: 42rpx 44rpx 38rpx 50rpx;
        .message-main {
          margin-bottom: 22rpx;
          color: #333;
          font-weight: 600;
          display: flex;
          align-items: center;
          font-size: 30rpx;
          &-name {
            margin-right: 40rpx;
            font-size: 32rpx;
          }
          .sign-box {
            background-color: #145ee1;
            color: #fff;
            border-radius: 22rpx;
            width: 100rpx;
            line-height: 40rpx;
            height: 40rpx;
            text-align: center;
            margin-left: 34rpx;
            font-size: 24rpx;
          }
        }
        &__address {
          font-weight: normal;
          color: #474747;
          font-size: 26rpx;
        }
      }
      .item-control {
        position: absolute;
        right: 44rpx;
        top: 76rpx;
        display: flex;
        align-items: center;
        .icon {
          width: 48rpx;
          height: 48rpx;
          margin-right: 30rpx;
        }
      }
    }
  }
  .address-list__btn, .btn-area {
      position: fixed;
      left: 0;
      right: 0;
      bottom: 0;
      padding: 20rpx 50rpx 50rpx;
      z-index: 98;
      .add-btn, .save-btn{
        width: 100%;
        text-align: center;
        height: 86rpx;
        line-height: 86rpx;
        background-color: #145ee1;
        color: #fff;
        border-radius: 44rpx;
        font-size: 30rpx;
      }
      .default-btn {
        border-radius: 44rpx;
        height: 86rpx;
        line-height: 86rpx;
        margin-bottom: 20rpx;
        color: #474747;
        font-size: 28rpx;
      }
    }
  .address-form {
    position: relative;
    font-size: 28rpx;
    &::after {
      position: absolute;
      content: "";
      height: 1rpx;
      width: 100%;
      left: 0;
      bottom: 0;
      transform: scaleY(0.5);
      background-color: #d7d7d7;
    }
    .form-item {
      position: relative;
      height: 100rpx;
      border-top: 1rpx solid #ebebeb;
      padding-right: 50rpx;
      padding-left: 210rpx;
      display: flex;
      align-items: center;
      &__label {
        padding-right: 20rpx;
        color: #474747;
        position: absolute;
        left: 50rpx;
      }
      &__body {
        position: relative;
        flex: 1;
        .area {
          height: 100%;
        }
        .arrow {
          position: absolute;
          right: 0;
          top: 4rpx;
          width: 28rpx;
          height: 30rpx;
          margin-left: 10rpx;
        }
      }
      &__status {
        position: absolute;
        top: -12rpx;
        left: 0;
        padding: 20rpx;
        z-index: 3;
        background-color: #d84d59;
        border-radius: 8rpx;
        color: #fff;
      }
    }
    .del-wrap {
      position: relative;
      .btn {
        color: #1360e1;
      }
      &::after {
        position: absolute;
        content: "";
        height: 1rpx;
        width: 100%;
        left: 0;
        bottom: 0;
        transform: scaleY(0.5);
        background-color: #d7d7d7;
      }
    }
    .radio-conatiner {
      position: absolute;
      right: 50rpx;
      display: inline-block;
      .radio-box {
        display: inline-block;
        width: 36rpx;
        height: 36rpx;
        border-radius: 50%;
        vertical-align: middle;
        cursor: pointer;
        border: 1rpx solid #ccc;
        &.disabled {
          background-color: #e8e8e8;
          pointer-events: none;
        }
      }
      .ico_selected {
        width: 100%;
        height: 100%;
      }
    }
    .split-bar {
      width: 100%;
      height: 16rpx;
      background-color: #f0f2f7;
    }
  }
  .default-placeholder {
    color: #d0d0d0;
  }
  .address-picker {
    &__toolbar {
      height: 80rpx;
      line-height: 80rpx;
      display: flex;
      justify-content: space-between;
      text {
        padding: 0 17rpx;
      }
    }
    &__item {
      line-height: 72rpx;
      padding: 0 20rpx;
      text-align: center;
    }
    &__div {
      color: #4a4a4a;
    }
  }
}
</style>

